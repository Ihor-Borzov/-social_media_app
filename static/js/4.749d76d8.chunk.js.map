{"version":3,"sources":["Components/Dialogs/DialogItems/DialogItems.module.css","Components/Dialogs/Dialogs.module.css","Components/Dialogs/Message/Message.module.css","HOC/withAuthRedirect.js","Components/Dialogs/DialogItems/DialogItems.jsx","Components/Dialogs/Message/Message.jsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","DialogItems","props","myCurrentPath","id","className","s","friend","avatar","to","src","picture","alt","friends_name","name","Message","wrapper","your_text","message","person_text","maximumChar","maxChar","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Input","userInput_text","placeholder","validate","required","buttonSend","Dialogs","displayedDialogs","navBarPage","friendData","map","dialogObject","displayedMessages","dialogsPage","messagesData","messageObject","useState","chatsOnOff","switchChats","chats","onClick","content","listOfDialogs","messenger","messageHistory","textWrapper","data","sendMessage","usersText","compose","connect","dispatch","SendMessageThunk","Component","RedirectComponent","render","React"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,OAAS,4BAA4B,OAAS,4BAA4B,QAAU,6BAA6B,aAAe,oC,oBCAlJD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,UAAY,2BAA2B,MAAQ,uBAAuB,eAAiB,gCAAgC,YAAc,6BAA6B,eAAiB,gCAAgC,WAAa,8B,oBCApUD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,UAAY,2BAA2B,YAAc,+B,yHCOtGC,EAAkB,SAACC,GACnB,MAAQ,CACJC,OAAQD,EAAME,KAAKD,S,4ECmBZE,MAzBf,SAAsBC,GAClB,IAAIC,EAAgB,YAAaD,EAAME,GAMvC,OAEA,sBAAKC,UAAWC,IAAEC,OAAlB,UAEJ,qBAAMF,UAAWC,IAAEE,OAAnB,SACK,cAAC,IAAD,CAASC,GAAKN,EAAd,SACO,qBAAKO,IAAKR,EAAMS,QAASN,UAAWC,IAAEK,QAASC,IAAK,oBAI5D,qBAAKP,UAAWC,IAAEO,aAAlB,SAAiCX,EAAMY,W,oCCA5BC,MAlBf,SAAkBb,GAGd,OAEF,qBAAKG,UAAWC,IAAEU,QAAlB,SACU,IAAXd,EAAME,GACJ,sBAAKC,UAAWC,IAAEW,UAAlB,eAAgCf,EAAMgB,QAAtC,QACA,sBAAKb,UAAWC,IAAEa,YAAlB,eAAkCjB,EAAMgB,QAAxC,WCuDH,IAAIE,EAAcC,YAAQ,KAiBpBC,EAAmBC,YAAU,CAACC,KAAK,eAAhBD,EAfP,SAACrB,GAEf,OACI,uBAAOuB,SAAUvB,EAAMwB,aAAvB,UAER,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAOxB,UAAWC,IAAEwB,eAAiBC,YAAY,mBAAmBjB,KAAK,YAAakB,SAAU,CAACC,IAAUb,KACxH,wBAAQf,UAAWC,IAAE4B,WAArB,wBAYUC,EAzEf,SAAkBjC,GAElB,IAAIkC,EAAmBlC,EAAMmC,WAAWC,WAAWC,KAAI,SAACC,GAAD,OAAgB,cAAC,EAAD,CAAa1B,KAAM0B,EAAa1B,KAAMV,GAAIoC,EAAapC,GAA0BO,QAAS6B,EAAa7B,SAAvC6B,EAAapC,OAEhJqC,EAAoBvC,EAAMwC,YAAYC,aAAaJ,KAAI,SAACK,GAAD,OAAiB,cAAC,EAAD,CAAS1B,QAAS0B,EAAc1B,QAAUd,GAAIwC,EAAcxC,IAASwC,EAAcxC,OAO/J,EAA+ByC,oBAAS,GAAxC,mBAAIC,EAAJ,KAAgBC,EAAhB,KAIA,OACA,gCACI,sBAAK1C,UAAWC,IAAE0C,MAAQC,QAAS,WAAKF,GAAaD,IAArD,cAAsEA,EAAY,aAAc,gBAEhG,sBAAKzC,UAAWC,IAAE4C,QAAlB,UAGCJ,GACD,qBAAKzC,UAAWC,IAAE6C,cAAlB,SACCf,IAOG,sBAAK/B,UAAWC,IAAE8C,UAAlB,UAGA,qBAAK/C,UAAWC,IAAE+C,eAAlB,SACNZ,IAID,qBAAKpC,UAAWC,IAAEgD,YAAlB,SAED,cAAChC,EAAD,CAAkBG,SAlClB,SAAwB8B,GACxBrD,EAAMsD,YAAYD,EAAKE,0BC2BRC,sBACbC,aAxCoB,SAAC7D,GACvB,MAAM,CACF4C,YAAa5C,EAAM4C,YACnBL,WAAavC,EAAMuC,eAMA,SAACuB,GACpB,MAAM,CACFJ,YAAY,SAACD,GAAQK,EAASC,YAAiBN,UJFvB,SAACO,GAAe,IAEtCC,EAFqC,4MAGvCC,OAAS,WACL,OAAI,EAAK9D,MAAMH,OAAkB,cAAC+D,EAAD,eAAgB,EAAK5D,QAC9C,cAAC,IAAD,CAAUO,GAAG,YALc,YAEXwD,IAAMH,WAStC,OAFiCH,YAAQ9D,EAAR8D,CAAyBI,KIqB/CL,CAGbvB","file":"static/js/4.749d76d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"DialogItems_friend__2f7Ki\",\"avatar\":\"DialogItems_avatar__1Ie1m\",\"picture\":\"DialogItems_picture__1doZC\",\"friends_name\":\"DialogItems_friends_name__2iYSS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Dialogs_content__b2oVT\",\"listOfDialogs\":\"Dialogs_listOfDialogs__2F9z_\",\"messenger\":\"Dialogs_messenger__I9ias\",\"chats\":\"Dialogs_chats__2dMMN\",\"messageHistory\":\"Dialogs_messageHistory__RpLH8\",\"textWrapper\":\"Dialogs_textWrapper__jP-CY\",\"userInput_text\":\"Dialogs_userInput_text__1Uw8Q\",\"buttonSend\":\"Dialogs_buttonSend__2vTIB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Message_wrapper__Juf8d\",\"your_text\":\"Message_your_text__dR9n1\",\"person_text\":\"Message_person_text__382qd\"};","/* Redirect HOC. redirects user to login page if user is not authorized (logged in). checking\r\nthe parameter isAuth */\r\n\r\nimport React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Navigate } from \"react-router-dom\"\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return ({\r\n        isAuth: state.auth.isAuth,\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render = () => {\r\n            if (this.props.isAuth) { return (<Component  {...this.props} />) }\r\n            return (<Navigate to=\"/login\" />);\r\n        }\r\n    }\r\n\r\n    let connectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n    return connectedRedirectComponent;\r\n\r\n}","import React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport s from './DialogItems.module.css'   \r\n\r\nfunction DialogItems (props){\r\n    let myCurrentPath = \"/dialogs/\"+ props.id       /* before return I can use regular javascript, and only in hte return i have to use JSX */\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n\r\n    <div className={s.friend}>\r\n\r\n<div  className={s.avatar} >\r\n     <NavLink to ={myCurrentPath} >\r\n            <img src={props.picture} className={s.picture} alt =\"user avatar\"/>\r\n     </NavLink>\r\n     </div>\r\n   \r\n    <div className={s.friends_name}>{props.name}</div>\r\n\r\n</div>\r\n)\r\n}\r\n\r\n\r\n\r\nexport default DialogItems;","import React from \"react\";\r\nimport s from './Message.module.css' \r\n\r\nfunction Message (props){\r\n\r\n\r\n    return(\r\n\r\n  <div className={s.wrapper}>  \r\n{props.id===0\r\n  ?<div className={s.your_text}>  {props.message}  </div> \r\n  :<div className={s.person_text}>  {props.message}  </div>\r\n  }\r\n</div>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport default Message;\r\n\r\n\r\n\r\n\r\n/* \r\n{props.id===0\r\n  ?<div className={s.your_text}>{props.message}</div>\r\n  :<div className={s.person_text}>{props.message}</div>\r\n  } */","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { Field } from 'redux-form';\r\nimport { reduxForm } from 'redux-form';\r\nimport { maxChar, required } from '../../Utilities/FormValidators/validators';\r\nimport { Input } from '../common/FormControls/FormControls';\r\nimport DialogItems from './DialogItems/DialogItems';\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Message/Message';\r\n\r\n\r\n\r\n\r\nfunction Dialogs (props){\r\n\r\nlet displayedDialogs = props.navBarPage.friendData.map((dialogObject)=><DialogItems name={dialogObject.name} id={dialogObject.id} key={dialogObject.id} picture={dialogObject.picture}/>)\r\n\r\nlet displayedMessages = props.dialogsPage.messagesData.map((messageObject)=><Message message={messageObject.message}  id={messageObject.id} key={messageObject.id} />)    /* this is the way we create new array with  JSX markup */\r\n\r\n\r\nfunction onSendMessage (data){\r\nprops.sendMessage(data.usersText);\r\n}\r\n\r\nlet[chatsOnOff, switchChats] = useState(true)\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n    <div className={s.chats}  onClick={()=>{switchChats(!chatsOnOff)}} > {chatsOnOff? \"hide chats\": \"show chats\"}</div>\r\n\r\n    <div className={s.content}>\r\n\r\n\r\n    {chatsOnOff &&\r\n    <div className={s.listOfDialogs}>\r\n    {displayedDialogs}    \r\n            </div>\r\n    }\r\n\r\n        \r\n\r\n\r\n        <div className={s.messenger}>\r\n\r\n\r\n        <div className={s.messageHistory}>         \r\n {displayedMessages} \r\n </div>\r\n\r\n\r\n <div className={s.textWrapper}>\r\n\r\n<DialogsReduxForm onSubmit={onSendMessage}/> \r\n  \r\n </div> \r\n        </div>\r\n        \r\n    </div>\r\n\r\n    </div>\r\n)\r\n}\r\n\r\n\r\nlet maximumChar = maxChar(300) /* this is our flexible validator with closure, for now we have to invoke it this way */\r\n\r\nconst DialogsForm=(props)=>{\r\n\r\n    return(\r\n        <form  onSubmit={props.handleSubmit}  >\r\n\r\n<Field component={Input} className={s.userInput_text}  placeholder=\"type the message\" name=\"usersText\"  validate={[required, maximumChar]} ></Field>   \r\n     <button className={s.buttonSend} >Send</button>\r\n\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nconst DialogsReduxForm = reduxForm({form:\"dialogsForm\"})(DialogsForm)\r\n\r\n\r\nexport default Dialogs;","\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../HOC/withAuthRedirect';\r\nimport { SendMessageThunk } from '../../Redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\n\r\n\r\nlet mapStateToProps = (state)=>{\r\nreturn{\r\n    dialogsPage :state.dialogsPage,\r\n    navBarPage : state.navBarPage,\r\n}\r\n}\r\n\r\n\r\n\r\nlet mapDispatchToProps=(dispatch)=>{\r\n    return{\r\n        sendMessage:(data)=>{dispatch(SendMessageThunk(data));},\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/* lesson#47.2 inside connect is a local subscriber function to change the app when changed the state:\r\n each time when there is a change in a state, state invokes the function mapStateToProps and creates a new object,\r\n new object compares with an old object. if nothing changed in that peace of new state from mapStateToProps object\r\n then there is no reason to rerender the page.\r\n React-redux expects us not to change existing objects in state by ourselves, that is why when we were changing them\r\n straight from reducers React-Redux was thinking that nothing changed and did not compare state objects - because our\r\n  reducers were returning changed state, but changed only through the link - so when connect was trying compare them he\r\n   sees that that is the same object, that is why we have to duplicate the needed peace of state object in the reducer, before working with it.\r\n   and after return duplicated changed state object - so connect can compare it to an old state object and can see the difference.\r\n so to make it work - we have to in the reducer work and return not our native sate, but duplicate our native state \r\n and work with duplicated copy, then when reducer will return to dispatch  changed stateCopy - dispatch will give it to\r\n connect and connect will check the difference between stateCopy and state and rerender the page if there are any differences\r\n*/\r\n\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n// const DialogsContainer = connect(mapStoreToProps,mapDispatchToProps)(AuthRedirectComponent);\r\n// export default DialogsContainer;\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps,mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}